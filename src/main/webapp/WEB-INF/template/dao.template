package com.nowui.chuangshi.dao;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.SqlPara;
import com.nowui.chuangshi.constant.Constant;
import com.nowui.chuangshi.model.#(first_upper_model_name_without_underline);

import java.util.Date;
import java.util.List;

public class #(first_upper_model_name_without_underline)Dao extends Dao {

    public Integer countByApp_idOrLike#(first_upper_model_name)_name(String app_id, String #(lower_model_name)_name) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).APP_ID, app_id);
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_model_name)_NAME, #(lower_model_name)_name);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).countByApp_idOrLike#(first_upper_model_name)_name", sqlMap);

        logSql("#(lower_model_name)", "countByApp_idOrLike#(first_upper_model_name)_name", sqlPara);

        Number count = Db.queryFirst(sqlPara.getSql(), sqlPara.getPara());
        return count.intValue();
    }

    public Integer countByOrApp_idOrLike#(first_upper_model_name)_name(String app_id, String #(lower_model_name)_name) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).APP_ID, app_id);
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_model_name)_NAME, #(lower_model_name)_name);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).countByOrApp_idOrLike#(first_upper_model_name)_name", sqlMap);

        logSql("#(lower_model_name)", "countByOrApp_idOrLike#(first_upper_model_name)_name", sqlPara);

        Number count = Db.queryFirst(sqlPara.getSql(), sqlPara.getPara());
        return count.intValue();
    }

    public List<#(first_upper_model_name_without_underline)> listByApp_idAndSystem_create_timeAndLimit(String app_id, Date system_create_time, int m, int n) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).APP_ID, app_id);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_CREATE_TIME, system_create_time);
        sqlMap.put(Constant.M, m);
        sqlMap.put(Constant.N, n);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).listByApp_idAndSystem_create_timeAndLimit", sqlMap);

        logSql("#(lower_model_name)", "listByApp_idAndSystem_create_timeAndLimit", sqlPara);

        return new #(first_upper_model_name_without_underline)().find(sqlPara.getSql(), sqlPara.getPara());
    }

    public List<#(first_upper_model_name_without_underline)> listByApp_idOrLike#(first_upper_model_name)_nameAndLimit(String app_id, String #(lower_model_name)_name, int m, int n) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).APP_ID, app_id);
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_model_name)_NAME, #(lower_model_name)_name);
        sqlMap.put(Constant.M, m);
        sqlMap.put(Constant.N, n);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).listByApp_idOrLike#(first_upper_model_name)_nameAndLimit", sqlMap);

        logSql("#(lower_model_name)", "listByApp_idOrLike#(first_upper_model_name)_nameAndLimit", sqlPara);

        return new #(first_upper_model_name_without_underline)().find(sqlPara.getSql(), sqlPara.getPara());
    }

    public List<#(first_upper_model_name_without_underline)> listByOrApp_idOrLike#(first_upper_model_name)_nameAndLimit(String app_id, String #(lower_model_name)_name, int m, int n) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).APP_ID, app_id);
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_model_name)_NAME, #(lower_model_name)_name);
        sqlMap.put(Constant.M, m);
        sqlMap.put(Constant.N, n);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).listByOrApp_idOrLike#(first_upper_model_name)_nameAndLimit", sqlMap);

        logSql("#(lower_model_name)", "listByOrApp_idOrLike#(first_upper_model_name)_nameAndLimit", sqlPara);

        return new #(first_upper_model_name_without_underline)().find(sqlPara.getSql(), sqlPara.getPara());
    }

    public #(first_upper_model_name_without_underline) findBy#(first_upper_column_key)(String #(column_key)) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_column_key), #(column_key));
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).findBy#(first_upper_column_key)", sqlMap);

        logSql("#(lower_model_name)", "findBy#(first_upper_column_key)", sqlPara);

        List<#(first_upper_model_name_without_underline)> #(lower_model_name)List = new #(first_upper_model_name_without_underline)().find(sqlPara.getSql(), sqlPara.getPara());
        if (#(lower_model_name)List.size() == 0) {
            return null;
        } else {
            return #(lower_model_name)List.get(0);
        }
    }

    public Boolean save(#for(column : columnList)#if(column.data_type == "TINYINT")Boolean #elseif(column.data_type == "INT")Integer #elseif(column.data_type == "DECIMAL")BigDecimal #else String #end #(column.column_name), #end String system_create_user_id) {
        Kv sqlMap = Kv.create();
        #for(column : columnList)
        sqlMap.put(#(first_upper_model_name_without_underline).#(column.upper_column_name), #(column.column_name));
        #end
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_CREATE_USER_ID, system_create_user_id);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_CREATE_TIME, new Date());
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_USER_ID, system_create_user_id);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_TIME, new Date());
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_VERSION, 0);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_STATUS, true);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).save", sqlMap);

        logSql("#(lower_model_name)", "save", sqlPara);

        return Db.update(sqlPara.getSql(), sqlPara.getPara()) != 0;
    }

    public Boolean update(String #(column_key), #for(column : columnList)# if(column.column_name == column_key || column.column_name == "app_id")#else #if(column.data_type == "TINYINT")Boolean #elseif(column.data_type == "INT")Integer #elseif(column.data_type == "DECIMAL")BigDecimal #else String #end #(column.column_name), #end #end String system_update_user_id, Integer system_version) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_column_key), #(column_key));
        #for(column : columnList)
        #if(column.column_name == column_key || column.column_name == "app_id")
        #else
        sqlMap.put(#(first_upper_model_name_without_underline).#(column.upper_column_name), #(column.column_name));
        #end
        #end
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_USER_ID, system_update_user_id);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_TIME, new Date());
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_VERSION, system_version);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).update", sqlMap);

        logSql("#(lower_model_name)", "update", sqlPara);

        return Db.update(sqlPara.getSql(), sqlPara.getPara()) != 0;
    }

    public Boolean deleteBy#(first_upper_column_key)AndSystem_version(String #(column_key), String system_update_user_id, Integer system_version) {
        Kv sqlMap = Kv.create();
        sqlMap.put(#(first_upper_model_name_without_underline).#(upper_column_key), #(column_key));
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_USER_ID, system_update_user_id);
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_UPDATE_TIME, new Date());
        sqlMap.put(#(first_upper_model_name_without_underline).SYSTEM_VERSION, system_version);
        SqlPara sqlPara = Db.getSqlPara("#(lower_model_name).deleteBy#(first_upper_column_key)AndSystem_version", sqlMap);

        logSql("#(lower_model_name)", "deleteBy#(first_upper_column_key)AndSystem_version", sqlPara);

        return Db.update(sqlPara.getSql(), sqlPara.getPara()) != 0;
    }

}